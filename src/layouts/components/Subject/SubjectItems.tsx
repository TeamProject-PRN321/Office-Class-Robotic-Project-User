import { Box, Button, Divider, Grid, List, ListItem, ListItemText, Pagination, Typography } from '@mui/material'
import * as React from 'react'
import useAuth from 'src/@core/hooks/useAuth'
import useAxios from 'src/@core/hooks/useAxios'
import MyDialog from 'src/@core/layouts/components/dialog/Dialog'

import ScheduleDashboard from '../Dashboard/DashboardSchedule'
import NewSubjectForm from './AddSubject/NewSubjectForm'

export interface SubjectModel {
  id: string
  subjectName: string
  totalSlots: number
  giaoTrinhData: GiaoTrinhData
}

export interface GiaoTrinhData {
  id: string
  giaoTrinhName: string
  description: string
  filePDF: string
  created: string
}

// Generated by https://quicktype.io

const URL_GET_ALL_SUBJECT = '/api/v1/subject/all'

export default function SubjectItems() {
  const [data, setData] = React.useState<SubjectModel[]>([])
  const [paginationModel, setPagination] = React.useState<{
    size: number
    page: number
  }>({
    size: 10,
    page: 1
  })
  const [dialodDetailOpen, setDialodDetailOpen] = React.useState<boolean>(false)
  const [subjectDetail, setSubjectDetail] = React.useState<any>({})

  const axiosClient = useAxios()
  const authen = useAuth()

  const role = authen.role

  React.useEffect(() => {
    const fetchAllSubject = async () => {
      try {
        const response = await axiosClient.call('get', URL_GET_ALL_SUBJECT)
        setData(response)
      } catch (error) {}
    }

    fetchAllSubject()
  }, [])

  const refetch = async () => {
    try {
      const response = await axiosClient.call('get', URL_GET_ALL_SUBJECT)
      setData(response)
    } catch (error) {}
  }

  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {
    setPagination({
      ...paginationModel,
      page: value
    })
  }

  const handleClose = () => {
    setDialodDetailOpen(false)
  }

  const handleViewDetail = (value: SubjectModel) => {
    setSubjectDetail(value)
    setDialodDetailOpen(true)
  }

  return (
    <Grid container direction={'column'} spacing={2}>
      <Grid
        marginBottom={'20px'}
        item
        display={'flex'}
        justifyContent={'space-between'}
        width={'100%'}
        alignItems={'center'}
      >
        <Typography sx={{ color: 'black', fontWeight: 'bold', fontSize: '20px' }}>Subject</Typography>
        {role === 'Admin' && <NewSubjectForm callBackCreate={refetch} />}
      </Grid>

      <Grid item container spacing={3} flexDirection={'row'}>
        {data
          .slice((paginationModel.page - 1) * paginationModel.size, paginationModel.page * paginationModel.size)
          .map((item, index) => {
            return (
              <Grid item xl={3} lg={3} md={4} sm={6} xs={12} key={index}>
                <ScheduleDashboard data={item} onClickViewDetail={handleViewDetail} />
              </Grid>
            )
          })}
      </Grid>
      <Grid
        item
        sx={{
          display: 'flex',
          justifyContent: 'center',
          pt: 3
        }}
      >
        <Pagination
          count={Math.ceil(data.length / paginationModel.size)}
          page={paginationModel.page}
          onChange={handleChange}
          color='primary'
        />
      </Grid>
      <MyDialog
        content={
          <Box
            sx={{
              minWidth: '400px'
            }}
          >
            <Typography variant='h5' fontWeight={650}>
              {subjectDetail.subjectName}
            </Typography>
            <List>
              <ListItem>
                <ListItemText primary='Total Slots' secondary={subjectDetail.totalSlots} />
              </ListItem>
              <Divider variant='inset' component='li' />
              <ListItem>
                <ListItemText primary='Teaching Material:' />
              </ListItem>
              {subjectDetail.giaoTrinhData && ( // Check if giaoTrinhData exists
                <List>
                  <ListItem>
                    <ListItemText primary='Name' secondary={subjectDetail.giaoTrinhData.giaoTrinhName} />
                  </ListItem>
                  <ListItem>
                    <ListItemText primary='Description' secondary={subjectDetail.giaoTrinhData.description} />
                  </ListItem>
                  {subjectDetail.giaoTrinhData.filePDF && ( // Check if filePDF exists
                    <ListItem>
                      <ListItemText primary='PDF File' secondary='Click to download' />
                    </ListItem>
                  )}
                </List>
              )}
            </List>
          </Box>
        }
        handleClose={handleClose}
        open={dialodDetailOpen}
        title={'Subject Details'}
        action={
          <Box display={'flex'} justifyContent={'center'}>
            <Button onClick={handleClose}>Close</Button>
          </Box>
        }
      />
    </Grid>
  )
}
